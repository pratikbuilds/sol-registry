{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wallet",
  "type": "registry:component",
  "title": "Wallet Components",
  "description": "Solana wallet connection components with Wallet Standard integration.",
  "dependencies": [
    "@wallet-standard/react",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "dialog"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/wallet/ConnectWalletBtn.tsx",
      "content": "\"use client\";\nimport { useState } from \"react\";\nimport { useWallets } from \"@wallet-standard/react\";\nimport { useWallet } from \"./WalletContext\";\n\nimport { Button } from \"../../ui/button\";\nimport { WalletListModal } from \"./WalletListModal\";\nimport { WalletInfo } from \"./WalletInfo\";\n\nexport function ConnectWalletBtn() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const wallets = useWallets();\n  const { isConnected } = useWallet();\n  console.log(\"isConnected\", isConnected);\n  const solanaWallets = wallets.filter((wallet) =>\n    wallet.chains.some((chain) => chain.startsWith(\"solana:\"))\n  );\n\n  return (\n    <>\n      {isConnected ? (\n        <WalletInfo />\n      ) : (\n        <Button onClick={() => setIsModalOpen(true)}>Connect Wallet</Button>\n      )}\n      <WalletListModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        wallets={solanaWallets}\n      />\n    </>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/wallet/WalletContext.tsx",
      "content": "\"use client\";\nimport { createContext, useContext, useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport type { UiWalletAccount, UiWallet } from \"@wallet-standard/react\";\n\ninterface ConnectedWallet {\n  account: UiWalletAccount;\n  wallet: UiWallet;\n}\n\ninterface WalletContextType {\n  account: UiWalletAccount | null;\n  wallet: UiWallet | null;\n  connectedWallet: ConnectedWallet | null;\n  setConnectedWallet: (wallet: ConnectedWallet | null) => void;\n  isConnected: boolean;\n}\n\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\n\nexport function WalletProvider({ children }: { children: ReactNode }) {\n  const [connectedWallet, setConnectedWallet] =\n    useState<ConnectedWallet | null>(null);\n\n  const value = {\n    account: connectedWallet?.account || null,\n    wallet: connectedWallet?.wallet || null,\n    connectedWallet,\n    setConnectedWallet,\n    isConnected: !!connectedWallet,\n  };\n\n  return (\n    <WalletContext.Provider value={value}>{children}</WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error(\"useWallet must be used within a WalletProvider\");\n  }\n  return context;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/blocks/wallet/WalletInfo.tsx",
      "content": "\"use client\";\nimport { LogOut, Wallet } from \"lucide-react\";\nimport { useWallet } from \"./WalletContext\";\nimport { Button } from \"../../ui/button\";\n\nexport function WalletInfo() {\n  const { account, wallet, isConnected, setConnectedWallet } = useWallet();\n\n  if (!isConnected || !account || !wallet) {\n    return null;\n  }\n\n  // Format the public key to show first and last few characters\n  const formatPublicKey = (pubkey: string) => {\n    if (pubkey.length <= 12) return pubkey;\n    return `${pubkey.slice(0, 4)}...${pubkey.slice(-4)}`;\n  };\n\n  const handleDisconnect = () => {\n    setConnectedWallet(null);\n  };\n\n  return (\n    <Button\n      variant=\"outline\"\n      onClick={handleDisconnect}\n      className=\"h-10 px-3 bg-background hover:bg-accent/50 border-border group\"\n    >\n      <div className=\"flex items-center space-x-2\">\n        {wallet.icon ? (\n          <img\n            src={wallet.icon}\n            alt=\"Wallet\"\n            className=\"w-5 h-5 rounded object-cover\"\n          />\n        ) : (\n          <Wallet className=\"w-5 h-5 text-muted-foreground\" />\n        )}\n        <span className=\"text-sm font-mono text-foreground\">\n          {formatPublicKey(account.address)}\n        </span>\n        <LogOut className=\"w-4 h-4 text-muted-foreground group-hover:text-destructive transition-colors\" />\n      </div>\n    </Button>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/wallet/WalletListModal.tsx",
      "content": "\"use client\";\nimport {\n  useConnect,\n  useDisconnect,\n  type UiWallet,\n} from \"@wallet-standard/react\";\nimport { useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useWallet } from \"./WalletContext\";\nimport { Button } from \"../../ui/button\";\n\ninterface WalletListModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  wallets: UiWallet[];\n}\n\nexport function WalletListModal({\n  isOpen,\n  onClose,\n  wallets,\n}: WalletListModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Connect Wallet</DialogTitle>\n        </DialogHeader>\n        <DialogDescription>Select a wallet to connect to.</DialogDescription>\n        <div className=\"flex flex-col gap-2\">\n          {wallets.map((wallet) => (\n            <WalletListItem\n              key={wallet.name}\n              wallet={wallet}\n              onConnect={onClose}\n            />\n          ))}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface WalletItemProps {\n  wallet: UiWallet;\n  onConnect?: () => void;\n}\n\nexport const WalletListItem = ({ wallet, onConnect }: WalletItemProps) => {\n  const [isConnecting, connect] = useConnect(wallet);\n  const [isDisconnecting, disconnect] = useDisconnect(wallet);\n  const { setConnectedWallet, isConnected } = useWallet();\n\n  useEffect(() => {\n    if (isDisconnecting) {\n      setConnectedWallet(null);\n    }\n  }, [isDisconnecting, setConnectedWallet]);\n\n  const handleConnect = async () => {\n    try {\n      const connectedAccount = await connect();\n      if (!connectedAccount.length) {\n        console.warn(`Connect to ${wallet.name} but there are no accounts.`);\n        return connectedAccount;\n      }\n\n      const first = connectedAccount[0];\n      setConnectedWallet({ account: first, wallet });\n      onConnect?.(); // Close modal after successful connection\n      return connectedAccount;\n    } catch (error) {\n      console.error(\"Failed to connect wallet:\", error);\n    }\n  };\n\n  return (\n    <Button\n      variant=\"outline\"\n      className=\"w-full justify-start p-4 h-auto border-2 hover:border-primary/50 hover:bg-accent/50 transition-all duration-200\"\n      onClick={isConnected ? disconnect : handleConnect}\n      disabled={isConnecting}\n    >\n      <div className=\"flex items-center space-x-3 w-full\">\n        {wallet.icon ? (\n          <img\n            src={wallet.icon}\n            alt={wallet.name}\n            className=\"w-10 h-10 rounded-lg object-cover border border-border\"\n          />\n        ) : (\n          <div className=\"w-10 h-10 rounded-lg bg-muted flex items-center justify-center border border-border\">\n            <span className=\"text-muted-foreground text-lg font-semibold\">\n              {wallet.name.charAt(0).toUpperCase()}\n            </span>\n          </div>\n        )}\n        <div className=\"flex-1 text-left\">\n          <div className=\"font-semibold text-foreground\">\n            {isConnecting ? \"Connecting...\" : wallet.name}\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            {isConnecting ? \"Please wait...\" : \"Click to connect\"}\n          </div>\n        </div>\n        {isConnecting && (\n          <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n        )}\n      </div>\n    </Button>\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}